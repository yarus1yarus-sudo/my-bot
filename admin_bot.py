import os
import json
import time
import requests
from urllib.parse import quote

def load_config():
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {
            "bot_enabled": True,
            "schedule_minutes": 15,
            "last_sent": 0,
            "admin_id": 6396018806,
            "version": "1.0"
        }

def save_config(config):
    with open('config.json', 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

def send_telegram_message(message, chat_id, reply_markup=None):
    token = os.getenv('ADMIN_BOT_TOKEN')
    if not token:
        print("‚ùå ADMIN_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML'
    }
    
    if reply_markup:
        data['reply_markup'] = json.dumps(reply_markup)
    
    try:
        response = requests.post(url, data=data)
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    return {
        "inline_keyboard": [
            [
                {"text": "üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç", "callback_data": "start_bot"},
                {"text": "üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç", "callback_data": "stop_bot"}
            ],
            [
                {"text": "‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", "callback_data": "schedule_menu"},
                {"text": "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞", "callback_data": "status"}
            ],
            [
                {"text": "üòÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç", "callback_data": "send_joke"},
                {"text": "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", "callback_data": "refresh"}
            ]
        ]
    }

def create_schedule_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    return {
        "inline_keyboard": [
            [
                {"text": "5 –º–∏–Ω", "callback_data": "schedule_5"},
                {"text": "10 –º–∏–Ω", "callback_data": "schedule_10"},
                {"text": "15 –º–∏–Ω", "callback_data": "schedule_15"}
            ],
            [
                {"text": "30 –º–∏–Ω", "callback_data": "schedule_30"},
                {"text": "1 —á–∞—Å", "callback_data": "schedule_60"},
                {"text": "2 —á–∞—Å–∞", "callback_data": "schedule_120"}
            ],
            [
                {"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "main_menu"}
            ]
        ]
    }

def process_callback(callback_data, chat_id, config):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    
    if chat_id != config['admin_id']:
        send_telegram_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º!", chat_id)
        return config
    
    if callback_data == "start_bot":
        config['bot_enabled'] = True
        save_config(config)
        send_telegram_message("üü¢ <b>–ë–æ—Ç –ó–ê–ü–£–©–ï–ù!</b>\n\n‚úÖ –ê–Ω–µ–∫–¥–æ—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é", chat_id, create_main_menu())
        
    elif callback_data == "stop_bot":
        config['bot_enabled'] = False
        save_config(config)
        send_telegram_message("üî¥ <b>–ë–æ—Ç –û–°–¢–ê–ù–û–í–õ–ï–ù!</b>\n\n‚ùå –ê–Ω–µ–∫–¥–æ—Ç—ã –ù–ï –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è", chat_id, create_main_menu())
        
    elif callback_data == "status":
        status = "üü¢ –†–ê–ë–û–¢–ê–ï–¢" if config['bot_enabled'] else "üî¥ –û–°–¢–ê–ù–û–í–õ–ï–ù"
        last_sent = "–ù–∏–∫–æ–≥–¥–∞" if config['last_sent'] == 0 else time.strftime("%d.%m.%Y %H:%M", time.localtime(config['last_sent']))
        
        message = f"""üìä <b>–°–¢–ê–¢–£–° –ë–û–¢–ê</b>
        
ü§ñ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {status}
‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {config['schedule_minutes']} –º–∏–Ω—É—Ç
üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–µ–∫–¥–æ—Ç: {last_sent}
üë§ –ê–¥–º–∏–Ω ID: {config['admin_id']}
üì¶ –í–µ—Ä—Å–∏—è: {config['version']}"""
        
        send_telegram_message(message, chat_id, create_main_menu())
        
    elif callback_data == "schedule_menu":
        send_telegram_message("‚è∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏:</b>", chat_id, create_schedule_menu())
        
    elif callback_data.startswith("schedule_"):
        minutes = int(callback_data.split("_")[1])
        config['schedule_minutes'] = minutes
        save_config(config)
        
        hours_text = ""
        if minutes >= 60:
            hours = minutes // 60
            hours_text = f" ({hours} —á.)" if hours == 1 else f" ({hours} —á.)"
            
        send_telegram_message(f"‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n‚úÖ –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {minutes} –º–∏–Ω—É—Ç{hours_text}", chat_id, create_main_menu())
        
    elif callback_data == "send_joke":
        send_telegram_message("üòÑ <b>–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\nüöÄ –ê–Ω–µ–∫–¥–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞", chat_id, create_main_menu())
        config['last_sent'] = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        save_config(config)
        
    elif callback_data == "main_menu" or callback_data == "refresh":
        send_telegram_message("üéõÔ∏è <b>–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–û–¢–û–ú</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", chat_id, create_main_menu())
    
    return config

def process_command(command, chat_id, config):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    
    if chat_id != config['admin_id']:
        send_telegram_message("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º!", chat_id)
        return config
    
    if command in ['/start', '/help', '/menu']:
        welcome_message = f"""üéõÔ∏è <b>–ü–ê–ù–ï–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ë–û–¢–û–ú</b>

üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω!

ü§ñ –ë–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        send_telegram_message(welcome_message, chat_id, create_main_menu())
    
    return config

def main():
    print("üöÄ –ê–¥–º–∏–Ω-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    
    token = os.getenv('ADMIN_BOT_TOKEN')
    if not token:
        print("‚ùå ADMIN_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    offset = 0
    start_time = time.time()
    timeout_duration = 300  # 5 –º–∏–Ω—É—Ç
    
    config = load_config()
    
    while time.time() - start_time < timeout_duration:
        try:
            url = f"https://api.telegram.org/bot{token}/getUpdates"
            params = {'offset': offset, 'timeout': 10}
            
            response = requests.get(url, params=params, timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                
                if data['ok'] and data['result']:
                    for update in data['result']:
                        offset = update['update_id'] + 1
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                        if 'message' in update:
                            message = update['message']
                            chat_id = message['chat']['id']
                            text = message.get('text', '')
                            
                            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text} –æ—Ç {chat_id}")
                            config = process_command(text, chat_id, config)
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
                        elif 'callback_query' in update:
                            callback = update['callback_query']
                            chat_id = callback['from']['id']
                            callback_data = callback['data']
                            
                            print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {callback_data} –æ—Ç {chat_id}")
                            
                            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
                            callback_url = f"https://api.telegram.org/bot{token}/answerCallbackQuery"
                            requests.post(callback_url, data={'callback_query_id': callback['id']})
                            
                            config = process_callback(callback_data, chat_id, config)
            
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
                time.sleep(5)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            time.sleep(5)
    
    print("‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∞–¥–º–∏–Ω-–±–æ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ")

if __name__ == "__main__":
    main()
